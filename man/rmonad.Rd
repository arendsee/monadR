% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rmonad.R
\docType{package}
\name{rmonad}
\alias{rmonad}
\alias{rmonad-package}
\title{rmonad: handling pipes, errors, and everything with monads}
\description{
Rmonad merges blocks of code into a graph containing the history of all past
operations, and optionally their values. It consists mainly of a set of
monadic bind operators for controlling a pipeline and handling error. It
also contains functions for operating on monads, evaluating expressions into
monads, and extracting values from them. I will briefly introduce the most
useful of these here. For more information see the vignette.
}
\section{Basic Operators}{


 \%>>\%    monadic bind: applies rhs function to the lhs value

 \%v>\%    monadic bind: store intermediate result

 \%>_\%    perform rhs action, discard result, pass the lhs

 \%||\%    if input is error, use rhs value instead

 \%|>\%    if input is error, run rhs on last passing result

 \%*>\%    bind lhs list as arguments to right. The lhs may be a literal
           list or a monad bound list.
}

\section{Advanced operators}{


 \%__\%    keep parents from the lhs (errors ignored). This allows chaining
           of independent operations.

 \%v__\%   like \%__\% but store lhs result

 \%>^\%    Bind as a new branch, pass input on main. This differs from
           \%>_\% in that future operations do not depend on its
           pass/fail status.
}

\examples{

# chain operations
cars \%>>\% colSums

# chain operations with intermediate storing
cars \%v>\% colSums

# handle failing monad
iris \%>>\% colSums \%|>\% head
cars \%>>\% colSums \%|>\% head

# run an effect
cars \%>_\% plot \%>>\% colSums

# return first successful operation
read.csv("a.csv") \%||\% iris \%>>\% head

# join two independent pipelines, preserving history
cars \%>>\% colSums \%v__\% cars \%>>\% lapply(sd) \%>>\% unlist

# load an expression into a monad, catching errors
as_monad(stop("instant death"))

# convert multiple expressions into a list inside a monad
funnel(stop("oh no"), runif(5), sqrt(-1))
}
